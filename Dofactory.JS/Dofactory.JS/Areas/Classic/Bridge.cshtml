@{
    ViewBag.Title = "Bridge";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/classic">Classic</a></li>
    <li class="breadcrumb-item"><a href="/classic/bridge">Bridge</a></li>
</ol>


<div class="row">
    <div class="col-7">
        <h2>Bridge</h2>
        <div class="py-30 pl-md-40 pl-0">

            <p>
                Decouple an abstraction from its implementation so that the two can vary independently.
            </p>

            <partial name="_UsageLow" />

        </div>
    </div>
    <div class="col-5 text-center pt-30">
        <partial name="_Image" />
    </div>
</div>


<br />
<hr />
<br />


<div class="row">
    <div class="col-8">
        <h3>Summary</h3>
        <br />
        <p class="ptext">
            The Bridge pattern allows two components, a client and a service, to work together with each component having its own interface.
            Bridge is a high-level architectural pattern and its main goal is to write better code through two levels of abstraction.
            It facilitates very loose coupling of objects. It is sometimes referred to as a double Adapter pattern.
        </p>
        <p class="ptext">
            An example of the Bridge pattern is an application (the client) and a database driver (the service). The application writes to a well-defined database API,
            for example ODBC, but behind this API you will find that each driver's implementation is totally different for each database vendor (SQL Server, MySQL, Oracle, etc.).
        </p>
        <p class="ptext">
            The Bridge pattern is a great pattern for driver development but it is rarely seen in JavaScript.
        </p>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="col-8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="/img/diagrams/javascript-bridge.jpg" alt="" />
        </div>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="col-8">
        <h3>Participants</h3>
        <br />
        <div class="ptext">
            The objects participating in this pattern are: <br /><br />

            <ul>
                <li>
                    <b>Client</b> -- In sample code: the run() function.
                    <ul>
                        <li>calls into Abstraction to request an operation</li>
                    </ul>
                </li>
                <li>
                    <b>Abstraction</b> -- not used in JavaScript
                    <ul>
                        <li>declares an interface for first level abstraction</li>
                        <li>maintains a reference to the Implementor</li>
                    </ul>
                </li>
                <li>
                    <b>RefinedAbstraction</b> -- In sample code: <b style="color:#088;">Gestures, Mouse</b>
                    <ul>
                        <li>implements and extends the interface defined by Abstraction</li>
                    </ul>
                </li>
                <li>
                    <b>Implementor</b> -- not used in JavaScript
                    <ul>
                        <li>declares an interface for second level or implementor abstraction</li>
                    </ul>
                </li>
                <li>
                    <b>ConcreteImplementor</b> -- In sample code: <b style="color:#088;">Screen, Audio</b>
                    <ul>
                        <li>implements the Implementor interface and defines its effects</li>
                    </ul>
                </li>
            </ul>


        </div>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="col-8">
        <h3>JavaScript Code</h3>
        <br />
        <p class="ptext">
            The objective of the example is to show that with the Bridge pattern input and output devices can vary independently (without changes to the code); the devices are loosely coupled by two levels of abstraction.
        </p>
        <p class="ptext">
            JavaScript does not support abstract classes therefore Abstraction and Implementor are not included.
            However, their interfaces (properties and methods) are consistently implemented in RefinedAbstraction and ConcreteImplementor.
            In our example code the Abstraction represents Input devices and the Implementor represents Output devices.
        </p>
        <p class="ptext">
            <span class="cd">Gestures</span> (finger movements) and the <span class="cd">Mouse</span> are very different input devices, but their actions map to
            a common set of output instructions: click, move, drag, etc.  <span class="cd">Screen</span> and <span class="cd">Audio</span> are very different output devices,
            but they respond to the same set of instructions. Of course, the effects are totally different,
            that is, video updates vs. sound effects. The Bridge pattern allows any input device to work with any output device.
        </p>
        <p class="ptext">
            The <span class="cd">log</span> function is a helper which collects and displays results.
        </p>

        <br />
<pre class="prettyprint">
// input devices

var Gestures = function (output) {
    this.output = output;
    this.tap = function () { this.output.click(); }
    this.swipe = function () { this.output.move(); }
    this.pan = function () { this.output.drag(); }
    this.pinch = function () { this.output.zoom(); }
};

var Mouse = function (output) {
    this.output = output;
    this.click = function () { this.output.click(); }
    this.move = function () { this.output.move(); }
    this.down = function () { this.output.drag(); }
    this.wheel = function () { this.output.zoom(); }
};

// output devices

var Screen = function () {
    this.click = function () { log.add("Screen select"); }
    this.move = function () { log.add("Screen move"); }
    this.drag = function () { log.add("Screen drag"); }
    this.zoom = function () { log.add("Screen zoom in"); }
};

var Audio = function () {
    this.click = function () { log.add("Sound oink"); }
    this.move = function () { log.add("Sound waves"); }
    this.drag = function () { log.add("Sound screetch"); }
    this.zoom = function () { log.add("Sound volume up"); }
};

// logging helper

var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var screen = new Screen();
    var audio = new Audio();

    var hand = new Gestures(screen);
    var mouse = new Mouse(audio);

    hand.tap();
    hand.swipe();
    hand.pinch();

    mouse.click();
    mouse.move();
    mouse.wheel();

    log.show();
}
</pre>
        <a class="btn btn-green" href="javascript:void(0);" onclick="run();return false;">Run</a>&nbsp;&nbsp; <i>Displays 1 alert box.</i>

        <script type="text/javascript">
            // input devices

            var Gestures = function (output) {
                this.output = output;
                this.tap = function () { this.output.click(); }
                this.swipe = function () { this.output.move(); }
                this.pan = function () { this.output.drag(); }
                this.pinch = function () { this.output.zoom(); }
            };

            var Mouse = function (output) {
                this.output = output;
                this.click = function () { this.output.click(); }
                this.move = function () { this.output.move(); }
                this.down = function () { this.output.drag(); }
                this.wheel = function () { this.output.zoom(); }
            };

            // output devices

            var Screen = function () {
                this.click = function () { log.add("Screen select"); }
                this.move = function () { log.add("Screen move"); }
                this.drag = function () { log.add("Screen drag"); }
                this.zoom = function () { log.add("Screen zoom in"); }
            };

            var Audio = function () {
                this.click = function () { log.add("Sound oink"); }
                this.move = function () { log.add("Sound waves"); }
                this.drag = function () { log.add("Sound screetch"); }
                this.zoom = function () { log.add("Sound volume up"); }
            };

            function run() {

                var screen = new Screen();
                var audio = new Audio();

                var hand = new Gestures(screen);
                var mouse = new Mouse(audio);

                hand.tap();
                hand.swipe();
                hand.pinch();

                mouse.click();
                mouse.move();
                mouse.wheel();

                log.show();
            }
        </script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="col-8">
        <h3>JavaScript Optimized Code</h3>
        <br />
        <p class="ptext">
            The Namespace pattern is applied to keep the code out of the global namespace. Our namespace is named <span class="cd">Patterns.Classic</span>.
            A Module named <span class="cd">Bridge</span> returns all functions that make up the Bridge pattern.
            This includes input devices, output devices and all their methods.
        </p>
        <p class="ptext">
            The <span class="cd">Patterns</span> object contains the <span class="cd">namespace</span> function which constructs namespaces non-destructively,
            that is, if a name already exists it won't overwrite it.
        </p>
        <p class="ptext">
            The <span class="cd">log</span> function is a helper which collects and displays results.
        </p>

        <br />
<pre class="prettyprint">
var Patterns = {
    namespace: function (name) {
        var parts = name.split(".");
        var ns = this;

        for (var i = 0, len = parts.length; i < len; i++) {
            ns[parts[i]] = ns[parts[i]] || {};
            ns = ns[parts[i]];
        }

        return ns;
    }
};

Patterns.namespace("Classic").Bridge = (function () {

    return {

        // input devices
        Gestures: function (output) {
            this.tap = function () { output.click(); }
            this.swipe = function () { output.move(); }
            this.pan = function () { output.drag(); }
            this.pinch = function () { output.zoom(); }
        },

        Mouse: function (output) {
            this.click = function () { output.click(); }
            this.move = function () { output.move(); }
            this.down = function () { output.drag(); }
            this.wheel = function () { output.zoom(); }
        },

        // output devices
        Screen: function () {
            this.click = function () { log.add("Screen select"); }
            this.move = function () { log.add("Screen move"); }
            this.drag = function () { log.add("Screen drag"); }
            this.zoom = function () { log.add("Screen zoom in"); }
        },

        Audio: function () {
            this.click = function () { log.add("Sound oink"); }
            this.move = function () { log.add("Sound waves"); }
            this.drag = function () { log.add("Sound screetch"); }
            this.zoom = function () { log.add("Sound volume up"); }
        }

    };

})();

// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var bridge = Patterns.Classic.Bridge;

    var screen = new bridge.Screen();
    var audio = new bridge.Audio();

    var hand = new bridge.Gestures(screen);
    var mouse = new bridge.Mouse(audio);

    hand.tap();
    hand.swipe();
    hand.pinch();

    mouse.click();
    mouse.move();
    mouse.wheel();

    log.show();
}
</pre>
        <a class="btn btn-green" href="javascript:void(0);" onclick="run1();return false;">Run</a>&nbsp;&nbsp; <i>Displays 1 alert box.</i>

        <script type="text/javascript">
            var Patterns = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;

                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }

                    return ns;
                }
            };

            Patterns.namespace("Classic").Bridge = (function () {

                return {

                    // input devices
                    Gestures: function (output) {
                        this.tap = function () { output.click(); }
                        this.swipe = function () { output.move(); }
                        this.pan = function () { output.drag(); }
                        this.pinch = function () { output.zoom(); }
                    },

                    Mouse: function (output) {
                        this.click = function () { output.click(); }
                        this.move = function () { output.move(); }
                        this.down = function () { output.drag(); }
                        this.wheel = function () { output.zoom(); }
                    },

                    // output devices
                    Screen: function () {
                        this.click = function () { log.add("Screen select"); }
                        this.move = function () { log.add("Screen move"); }
                        this.drag = function () { log.add("Screen drag"); }
                        this.zoom = function () { log.add("Screen zoom in"); }
                    },

                    Audio: function () {
                        this.click = function () { log.add("Sound oink"); }
                        this.move = function () { log.add("Sound waves"); }
                        this.drag = function () { log.add("Sound screetch"); }
                        this.zoom = function () { log.add("Sound volume up"); }
                    }

                };

            })();

            // log helper
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();


            function run1() {

                var bridge = Patterns.Classic.Bridge;

                var screen = new bridge.Screen();
                var audio = new bridge.Audio();

                var hand = new bridge.Gestures(screen);
                var mouse = new bridge.Mouse(audio);

                hand.tap();
                hand.swipe();
                hand.pinch();

                mouse.click();
                mouse.move();
                mouse.wheel();

                log.show();
            }

        </script>


        <div class="d-flex py-30">
            <div><i class="icon-arrow-left pr-10 font-13"></i><a class="font-16 open-sans" href='/classic/adapter'>Adapter</a></div>
            <div class="ms-auto"><a class="font-16 open-sans" href='/classic/composite'>Composite</a><i class="icon-arrow-right font-13 pl-10"></i></div>
        </div>
    </div>
</div>





