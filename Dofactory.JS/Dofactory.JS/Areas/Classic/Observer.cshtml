@{
    ViewBag.Title = "Observer";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/classic">Classic</a></li>
    <li class="breadcrumb-item"><a href="/classic/observer">Observer</a></li>
</ol>


<div class="row">
    <div class="col-7">
        <h2>Observer</h2>
        <div class="py-30 pl-md-40 pl-0">

            <p>
                Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
            </p>

            <partial name="_UsageHigh" />

        </div>
    </div>
    <div class="col-5 text-center pt-30">
        <partial name="_Image" />
    </div>
</div>


<br />
<hr />
<br />


<div class="row">
    <div class="col-8">
        <h3>Summary</h3>
        <br />
        <p class="ptext">
            The Observer pattern offers a subscription model in which objects subscribe to an event and get notified when the event occurs.
            This pattern is the cornerstone of event driven programming, including JavaScript.
            The Observer pattern facilitates good object-oriented design and promotes loose coupling.
        </p>
        <p class="ptext">
            When building web apps you end up writing many event handlers. Event handlers are functions that will be notified when a certain event fires.
            These notifications optionally receive an event argument with details about the event (for example the x and y position of the mouse at a click event).
        </p>
        <p class="ptext">
            The event and event-handler paradigm in JavaScript is the manifestation of the Observer design pattern.
            Another name for the Observer pattern is Pub/Sub, short for Publication/Subscription.
        </p>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<!-- Diagram -->
<div class="row">
    <div class="col-8">
        <h3>Diagram</h3>
        <div style="padding: 14px 0 0 120px;">
            <img src="/img/diagrams/javascript-observer.jpg" alt="" />
        </div>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<br />
<!-- Participants -->
<div class="row">
    <div class="col-8">
        <h3>Participants</h3>
        <br />
        <div class="ptext">
            The objects participating in this pattern are: <br /><br />

            <ul>
                <li>
                    <b>Subject</b> -- In sample code: <b style="color:#088;">Click</b>
                    <ul>
                        <li>maintains list of observers. Any number of Observer objects may observe a Subject</li>
                        <li>implements an interface that lets observer objects subscribe or unsubscribe</li>
                        <li>sends a notification to its observers when its state changes</li>
                    </ul>
                </li>
                <li>
                    <b>Observers</b> -- In sample code: <b style="color:#088;">clickHandler</b>
                    <ul>
                        <li>has a function signature that can be invoked when Subject changes (i.e. event occurs)</li>
                    </ul>
                </li>
            </ul>

        </div>
    </div>
    <div class="col-3 offset1"></div>
</div>
<br />
<!-- JavaScript code -->
<div class="row">
    <div class="col-8">
        <h3>JavaScript Code</h3>
        <br />
        <p class="ptext">
            The <span class="cd">Click</span> object represents the Subject.
            The <span class="cd">clickHandler</span> function is the subscribing Observer.
            This handler subscribes, unsubscribes, and then subscribes itself while events are firing.
            It gets notified only of events #1 and #3.
        </p>
        <p class="ptext">
            Notice that the <span class="cd">fire</span> method accepts two arguments.
            The first one has details about the event and the second one is the
            context, that is, the <span class="cd">this</span> value for when the eventhandlers are called.
            If no context is provided <span class="cd">this</span> will be bound to the global object (window).
        </p>
        <p class="ptext">
            The <span class="cd">log</span> function is a helper which collects and displays results.
        </p>

        <br />
<pre class="prettyprint">
function Click() {
    this.handlers = [];  // observers
}

Click.prototype = {
    subscribe: function(fn) {
        this.handlers.push(fn);
    },

    unsubscribe: function(fn) {
        this.handlers = this.handlers.filter(
            function(item) {
                if (item !== fn) {
                    return item;
                }
            }
        );
    },

    fire: function(o, thisObj) {
        var scope = thisObj || window;
        this.handlers.forEach(function(item) {
            item.call(scope, o);
        });
    }
}

// log helper
var log = (function() {
    var log = "";
    return {
        add: function(msg) { log += msg + "\n"; },
        show: function() { alert(log); log = ""; }
    }
})();


function run() {

    var clickHandler = function(item) { 
        log.add("fired: " + item); 
    };

    var click = new Click();

    click.subscribe(clickHandler);
    click.fire('event #1');

    click.unsubscribe(clickHandler);
    click.fire('event #2');

    click.subscribe(clickHandler);
    click.fire('event #3');

    log.show();
}
</pre>
        <a class="btn btn-green" href="javascript:void(0);" onclick="run();return false;">Run</a>&nbsp;&nbsp; <i>Displays 1 alert box.</i>

        <script type="text/javascript">
            function Click() {
                this.handlers = [];  // observers
            }

            Click.prototype = {
                subscribe: function (fn) {
                    this.handlers.push(fn);
                },

                unsubscribe: function (fn) {
                    this.handlers = this.handlers.filter(
                        function (item) {
                            if (item !== fn) {
                                return item;
                            }
                        }
                    );
                },

                fire: function (o, thisObj) {
                    var scope = thisObj || window;
                    this.handlers.forEach(function (item) {
                        item.call(scope, o);
                    });
                }
            }

            function run() {

                var clickHandler = function (item) {
                    log.add("fired: " + item);
                };

                var click = new Click();

                click.subscribe(clickHandler);
                click.fire('event #1');

                click.unsubscribe(clickHandler);
                click.fire('event #2');

                click.subscribe(clickHandler);
                click.fire('event #3');

                log.show();
            }
        </script>



    </div>
</div>

<br />
<br />
<br />

<!-- JavaScript Optimated Code -->
<div class="row">
    <div class="col-8">
        <h3>JavaScript Optimized Code</h3>
        <br />
        <p class="ptext">
            The JavaScript environment is event-driven and the Observer pattern is built-in.
            There is no need to reinvent the wheel so we will use what is available.
            Unfortunately, the native event handling is different across browsers.
            But lucky for us, jQuery does a fantastic job of shielding developers from browser differences and it
            offers sophisticated event management and event handling, including custom events.
        </p>
        <p class="ptext">
            Here we have a <span class="cd">div</span> element on the page to which we attach three different event handlers using jQuery's <span class="cd">on</span> method.
            You will see that all three handlers execute when the 'poke' event gets triggered ('poke' is a custom event).
            At the end of the code we detach all event handlers with a single call to jQuery's <span class="cd">off</span> method.
        </p>

        <br />
<pre class="prettyprint">
// log helper
var log = (function () {
    var log = "";
    return {
        add: function (msg) { log += msg + "\n"; },
        show: function () { alert(log); log = ""; }
    }
})();


function run() {

    var div = jQuery("#div");

    // attach three event handlers
    div.on("poke", function () { log.add("poke handler 1"); });
    div.on("poke", function () { log.add("poke handler 2"); });
    div.on("poke", function () { log.add("poke handler 3"); });

    // trigger event
    div.trigger('poke');

    log.show();

    // detach event handlers
    div.off("poke");
}
</pre>
        <a class="btn btn-green" href="javascript:void(0);" onclick="run1();return false;">Run</a>&nbsp;&nbsp; <i>Displays 1 alert box.</i>
        <div id="div"></div>
        <script type="text/javascript">
            // log helper
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();


            function run1() {

                var div = jQuery("#div");

                // attach three event handlers
                div.on("poke", function () { log.add("poke handler 1"); });
                div.on("poke", function () { log.add("poke handler 2"); });
                div.on("poke", function () { log.add("poke handler 3"); });

                // trigger event
                div.trigger('poke');

                log.show();

                // detach event handlers
                div.off("poke");
            }

        </script>


        <div class="d-flex py-30">
            <div><i class="icon-arrow-left pr-10 font-13"></i><a class="font-16 open-sans" href='/classic/memento'>Memento</a></div>
            <div class="ms-auto"><a class="font-16 open-sans" href='/classic/state'>State</a><i class="icon-arrow-right font-13 pl-10"></i></div>
        </div>
    </div>
</div>


