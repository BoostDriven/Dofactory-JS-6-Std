@{
    ViewBag.Title = "Model View Design Patterns";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/modelview">Model View</a></li>
    </ol>
</nav>


<div class="row">
    <div class="col-7">
        <h2>Model View Design Patterns</h2>
        <div class="p-30">
            <p>
                The first ever documented pattern was MVC (Model View Controller).
                Two more recent Model View patterns are MVP (Model View Presenter) and MVVM (Model View ViewModel).<br /><br />
                Here we review these important patterns and their use in modern JavaScript development.
            </p>
        </div>

    </div>
    <div class="col-5 text-center pt-30">
        <partial name="_Image" />
    </div>
</div>

<br />
<br />
<br />

<div class="row">
    <div class="col-9">
        <table class="table">
            <tr>
                <th colspan="2" class="open-sans font-18"  style="font-weight:600; border-top:0px solid white;border-bottom:2px solid #F45D48;">&nbsp;&nbsp;Model View Patterns</th>
            </tr>
            <tr>
                <td class="w-30 pt-22">&nbsp;&nbsp;&nbsp;<a class="link" href='/modelview/introduction'>Introduction</a></td>
                <td class="w-70 pt-25">Introduction to Model View Patterns. </td>
            </tr>
            <tr>
                <td class="mv-col">&nbsp;&nbsp;&nbsp;<a class="link" href='/modelview/mvc'>MVC</a></td>
                <td>
                    <span class="open-sans font-18 fw-light-bold">Model View Controller</span><br />
                    Separates an application in three logical components: Model, View, and Controller. The Model represents the domain specific business data, usually coming from a database.
                    The View is the user interface with which the user interacts. The Controller receives events from the View and responds by updating the data in the Model, which,
                    in turn, notifies the View of the data changes.
                </td>
            </tr>
            <tr>
                <td>&nbsp;&nbsp;&nbsp;<a class="link" href='/modelview/mvp'>MVP</a></td>
                <td >
                    <span class="open-sans font-18 fw-light-bold">Model View Presenter</span><br />
                     A modification of MVC. The Controller is named Presenter as it takes a more active role in updating the View.
                    In MVP the Model and View do not communicate directly with each other; all communication goes via the Presenter.
                </td>
            </tr>
            <tr>
                <td>&nbsp;&nbsp;&nbsp;<a class="link" href='/modelview/mvvm'>MVVM</a></td>
                <td >
                    <span class="open-sans font-18 fw-light-bold">Model View ViewModel</span><br />
                    A further refinement of MVP with the addition of data binding.
                    The Presenter is named ViewModel gets the data from the Model and presents it to the View.
                    Data binding is used to synchronize data changes between the View and the ViewModel. The ViewModel updates the Model as needed.
                </td>
            </tr>
            <tr>
                <td>&nbsp;&nbsp;&nbsp;<a class="link" href='/modelview/mv'>MV Frameworks</a></td>
                <td style="line-height:19px;">
                    An overview of Model View JavaScript Frameworks.
                </td>
            </tr>
        </table>

    </div>
</div>

<div style="height:90px;">&nbsp;</div>


