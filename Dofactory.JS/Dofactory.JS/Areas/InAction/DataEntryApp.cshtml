@{
    ViewBag.Title = "Data Entry app";
}


<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/inaction">Patterns in Action</a></li>
    <li class="breadcrumb-item"><a href="/inaction/dataentry">Data Entry</a></li>
    <li class="breadcrumb-item"><a href="/inaction/dataentryapp">App</a></li>
</ol>

<div class="row">
    <div class="col-9">
        <div class="d-flex">
            <div><h2>Data Entry App</h2></div>
            <div class="pl-20 pt-12">Add, Edit, Delete customers</div>
        </div>
        
    </div>
    <div class="col-2 text-right">
        <a class="btn btn-red" href='/inaction/dataentry'>Close App</a>
    </div>
</div>

<br />
<br />
<br />
<br />

<div class="row">
    <div class="col-6" id="customers-content"></div>
    <div class="col-6" id="form-content"></div>
</div>

<script type="text/template" id="customers-template">
    <div class="d-flex">
        <div class=""><button class="btn btn-sm btn-green add">&nbsp;New Customer&nbsp;</button></div>
        <div class="pl-30 pt-3 font-18">Currently we have {{ count }} customers</div>
    </div>
    <hr />
    <div class="customers"></div>

</script>

<script type="text/template" id="customer-template">
    <div class="row py-7 border-bottom">
        <div class="col-5">{{ first }} {{ last }}</div>
        <div class="col-4"><button class='btn btn-sm btn-green edit'>Edit</button>&nbsp;&nbsp;<button class='btn btn-sm btn-red delete'>Delete</button></div>
    </div>
</script>

<script type="text/template" id="form-template">
    <div class="font-18 pt-5 pl-20">Add/Edit a customer</div>
    <div class="pt-20 pl-20">
        <div class='control-group'>
            <label for='first'>First Name</label>
            <input type='text' value="{{ first }}" class='form-control width-300' id='first'>
        </div>
        <div class='control-group pt-10'>
            <label for='last'>Last Name</label>
            <input type='text' value="{{ last }}" class='form-control width-300' id='last'>
        </div>
        <div class="form-actions">
            <hr />
            <button type="submit" class="btn btn-sm btn-green">Save</button>&nbsp;
            <button type="reset" class="btn btn-sm btn-outline-green">Cancel</button>
        </div>
    </div>
</script>

<br />
<br />
<br />
<br />


@section scripts
{
    <script type="text/javascript">

    var Patterns = {
        // ** namespace pattern
        namespace: function (name) {
            // ** single var pattern
            var parts = name.split(".");
            var ns = this;

            // ** iterator pattern
            for (var i = 0, len = parts.length; i < len; i++) {
                // ** || idiom
                ns[parts[i]] = ns[parts[i]] || {};
                ns = ns[parts[i]];
            }

            return ns;
        }
    };

    // ** namespace pattern
    // ** revealing module pattern
    // ** singleton pattern
    Patterns.namespace("InAction").DataEntry = (function () {

        // ** single var pattern
        // ** namespace pattern (Models, View, Routers)
        var Models = {};
        var Views = {};
        var Routers = {};

        var router;

        var start = function () {
            router = new Routers.Router();
            Backbone.history.start();
        }

        // Change template token markers to {{ and }}
        _.templateSettings = {
            interpolate: /\{\{(.+?)\}\}/g,
            evaluate: /\{\{(.+?)\}\}/g
        };

        // ** extend pattern
        // ** option hash idiom
        Routers.Router = Backbone.Router.extend({
            // ** init pattern
            initialize: function (options) {
                this.el1 = $("#customers-content");
                this.el2 = $("#form-content");
            },
            routes: {
                "": "main"
            },
            main: function () {
                this.el1.html(new Views.Customers().el);
            }
        });

        // ** extend pattern
        // ** option hash idiom
        Models.Customer = Backbone.Model.extend({

            defaults: {
                first: "",
                last: ""
            }
        });

        // ** extend pattern
        // ** option hash idiom
        Models.Customers = Backbone.Collection.extend({
            model: Models.Customer,
            url: "customers"
        });

        // ** extend pattern
        // ** option hash idiom
        Views.Customers = Backbone.View.extend({
            template: _.template($('#customers-template').html()),

            events: {
                'click .add': 'add'
            },
            // ** init pattern
            initialize: function () {
                this.collection = new Models.Customers();
                // ** observer pattern
                this.collection.on('reset add update remove change', this.render, this);
                this.collection.fetch();
            },
            render: function (eventName) {

                // total customer count
                this.$el.html(this.template({ count: this.collection.length }));

                // ** iterator pattern
                this.collection.each(function (customer) {
                    // ** option hash idiom
                    var view = new Views.Customer({ collection: this.collection, model: customer });
                    this.$el.append(view.render().el);
                }, this);

                return this;
            },
            add: function () {
                // ** option hash idiom
                var view = new Views.Customer.Form({ collection: this.collection, model: new Models.Customer() });
                $("#form-content").html(view.render().el);
                $('#first').focus();
            }
        });

        // ** extend pattern
        // ** option hash idiom
        Views.Customer = Backbone.View.extend({
            className: 'well',
            // ** chaining pattern
            template: _.template($('#customer-template').html()),
            events: {
                'click .edit': 'edit',
                'click .delete': 'remove'
            },
            // ** init pattern
            initialize: function() {
                this.model.bind("destroy", this.close, this);
            },
            render: function () {
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            },
            edit: function () {
                // ** option hash idiom
                var view = new Views.Customer.Form({ collection: this.collection, model: this.model });
                $("#form-content").html(view.render().el);
                // ** chaining pattern
                $('#first').focus().val('').val(this.model.get("first"));  // focus, but deselect the current value
            },
            remove: function () {
                this.model.destroy();
            },
            close: function () {
                $(this.el).unbind();
                $(this.el).remove();
            }
        });

        // ** extend pattern
        // ** option hash idiom
        Views.Customer.Form = Backbone.View.extend({
            tagName: 'form',
            className: 'form-horizontal',
            // ** chaining pattern
            template: _.template($('#form-template').html()),
            events: {
                'submit': 'submit',
                'reset' : 'cancel'
            },
            render: function () {
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            },
            submit: function (event) {
                event.preventDefault();

                if (this.model.isNew()) {     // add
                    this.collection.create({
                        first: this.$('#first').val(),
                        last: this.$('#last').val()
                    });

                } else {       // update
                    var mod = this.collection.get(this.model.get("id"));

                    this.model.set("first", this.$('#first').val());
                    this.model.set("last", this.$('#last').val());
                    var url = this.model.url;

                    this.model.url = "customers";
                    this.model.save();
                    this.model.url = url;
                }
                this.$el.empty();
            },
            cancel: function (event) {
                event.preventDefault();
                this.$el.empty();
            }
        });

        // Helper: generate four random hex digits.
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };

        // Helper: generate a pseudo-GUID by concatenating random hexadecimal.
        var guid = function () {
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        };

        // Used to mock database persistence
        if (!window.databaseCustomers) {
            window.databaseCustomers = [{ id: "5f294421-08af-135f-1d22-583245fb67b5", first: "Joan", last: "Kennedy" },
                                        { id: "461f92de-a7fc-a90d-4419-958423678d8f", first: "Kevin", last: "McGregor" }];
        }

        // server mock
        // ** options hash idiom
        fauxServer.addRoutes({
            listcustomers: {
                urlExp: "customers",
                httpMethod: "GET",
                handler: function (context) {
                    context.data = databaseCustomers;
                    return context.data;
                }
            },

            addCustomer: {
                urlExp: "customers",
                httpMethod: "POST",
                handler: function (context) {
                    context.data.id = guid();
                    databaseCustomers.push(context.data);
                    return context.data;
                }
            },

            updateCustomer: {
                urlExp: "customers",
                httpMethod: "PUT",
                handler: function (context) {
                    databaseCustomers.push(context.data);
                    return context.data;
                }
            },

            deleteCustomer: {
                urlExp: "customers/:id",
                httpMethod: "DELETE",
                handler: function (context, bookId) {
                    var len = databaseCustomers.length;
                    for (var i = 0; i < len; i++) {
                        if (databaseCustomers[i].id === bookId) {
                            databaseCustomers.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        });

        return { start: start };
    })();

    $(function () {

        // ** facade pattern
        Patterns.InAction.DataEntry.start();
    });
    </script>
}